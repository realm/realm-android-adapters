apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'com.github.spotbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'

android {
    compileSdkVersion sdkVersion
    buildToolsVersion buildTools

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion sdkVersion
        project.archivesBaseName = "android-adapters"
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

dependencies {
    compileOnly "androidx.appcompat:appcompat:1.3.0"
    compileOnly "androidx.recyclerview:recyclerview:1.2.1"
    compileOnly "io.realm:realm-android-library:${realmVersion}"
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.1.2'
}

// See https://spotbugs-gradle-plugin.netlify.app/com/github/spotbugs/snom/spotbugsextension
spotbugs {
    toolVersion.set('4.1.1')
    ignoreFailures.set(false)
    effort = "default"
    reportLevel = "medium"
    excludeFilter.set(file("${rootDir}/config/findbugs/findbugs-filter.xml"))
}

// See https://spotbugs.readthedocs.io/en/latest/migration.html#findbugs-gradle-plugin
task spotbugsMain(type: com.github.spotbugs.snom.SpotBugsTask) {
    dependsOn 'assemble'
    group = 'verification'
    classes = fileTree("build/intermediates/javac/")

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task pmd(type: Pmd) {
    group = 'Verification'
    print "${projectDir}"
    source = fileTree('src/main/java')
    ruleSetFiles = files("${projectDir}/../config/pmd/ruleset.xml")
    ruleSets = [] // This needs to be here to remove the default checks

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task checkstyle(type: Checkstyle) {
    group = 'Test'

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'

    def configProps = ['proj.module.dir': projectDir.absolutePath]
    configProperties configProps

    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")

    // empty classpath
    classpath = files()
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs

    options {
        title = "Realm Android Adapters ${project.version}"
        memberLevel = JavadocMemberLevel.PUBLIC
        docEncoding = 'UTF-8'
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        locale = 'en_US'

        links "http://docs.oracle.com/javase/7/docs/api/"
        links "https://docs.mongodb.com/realm-sdks/java/${realmVersion}/"
        linksOffline "https://developer.android.com/reference/kotlin/androidx/packages", "${android.sdkDirectory}/docs/reference"
    }
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// See https://github.com/chrisbanes/gradle-mvn-push/pull/13
afterEvaluate {
    javadoc.classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    javadoc.classpath += project.android.libraryVariants.toList().first().javaCompileProvider.get().classpath
}

apply from: "${rootDir}/mavencentral-publications.gradle"

publishing {
    publications {
        realmPublication(MavenPublication) {
            groupId 'io.realm'
            artifactId = 'android-adapters'
            artifact (file("${rootDir}/adapters/build/outputs/aar/android-adapters-release.aar")) {
                builtBy assemble
            }
            artifact sourcesJar
            artifact javadocJar
            populatePom(
                    it,
                    'android-adapters',
                    'Android UI adapters for Realm. Realm is a mobile database: Make better apps, faster.'
            )
        }
    }
}
